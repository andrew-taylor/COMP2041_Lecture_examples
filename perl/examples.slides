<title>Perl Examples
<slide>
<heading>Exponential Concatenation
<source examples/exponential_concatenation.pl>
<p>
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% .large_string.pl 30
String of 2^30 = 1073741824 characters created
</ssession>
</slide>
<slide>
<heading>Array growth demo
<source examples/array_growth_demo.pl>
</slide>
<slide>
<heading>Count lines
Count the number of lines on standard input.
<p>
A straightforward solution:
<p>
<source examples/line_count.0.pl>
<p>
Which can be simplified because we don't need to store the line
just count it.
<p>
<source examples/line_count.1.pl>
<p>
And be made even more succint:
<p>
<source examples/line_count.2.pl>
<p>
Or we can read the input into an array and use the array size.
<p>
<source examples/line_count.3.pl>
<p>
Or we can use less obvious parts of Perl.
<p>
Assignment to () forces a list context and hence reading all lines of input.
<p>
The special variable $. contains the current line number
<p>
<source examples/line_count.4.pl>
<p>
</slide>
<slide>
<heading>/bin/echo
Implementations of /bin/echo in Perl.
<p>
Looping through arguments:
<p>
<source examples/echo.0.pl>
<p>
Using interpolation of an arrays inside a strings:
<p>
<source examples/echo.1.pl>
<p>
Using join:
<p>
<source examples/echo.2.pl>
<p>
</slide>
<slide>
<heading>Swapping Harry & Hermione
<p>
For each file given as an argument replace occurrences of Harry with Hermione
and vice-versa.  Assumes Zaphod does not occur in file (could use \n instead of Zaphod).
<p>
<source examples/gender_reversal.0.pl>
<p>
The unix filter-like behaviour of  &lt;&gt; can be used to read files
<p>
Perl's -i option replaces the file with output from the script.
<p>
<source examples/gender_reversal.1.pl>
<p>
Perl's default variable $_, can make the script more concise.
<p>
<source examples/gender_reversal.2.pl>
<p>
Perl's -p option also provides unix filter like behaviour:
<p>
<source examples/gender_reversal.3.pl>
<p>
Perl's -e option allows the script to be put on the command line:
<program>
perl -i -p -e 's/Herm[io]+ne/Zaphod/g;s/Harry/Hermione/g;s/Zaphod/Harry/g' *.txt
</program>
</slide>
<slide>
<heading>/usr/bin/cp 
Implementations of /bin/cp in Perl.
<p>
Simple line by line copying:
<p>
<source examples/cp.0.pl>
<p>
Simple line by line copying with $_:
<p>
<source examples/cp.1.pl>
<p>
Reading entire file into an array:
<p>
<source examples/cp.2.pl>
<p>
Cheating - using system to run /bin/cp :
<p>
<source examples/cp.3.pl>
<p>
A Perl trick: making the line separator undefined so
we can slurp the whole file into a scalar variable with a single read
<p>
<source examples/cp.4.pl>
</slide>
<slide>
<heading>wget.pl - fetch a web page
Fetch a web page removing HTML tags and constants
<p>
Lines between script or style tags are skipped.
<p>
Non-blank lines are printed
<p>
<source examples/wget.pl>
</slide>
<slide>
<heading>Print nth-word on every line
Authors sometimes hide secret messages on a particular (e.g first) word
of every line of a text,
<p>
This script prints the nth-word on every line of its input files/stdin.
<p>
Note use of the external program fmt to make the output easier to read.
<p>
<source examples/nth_word.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% nth_word.pl 9 dracula.txt 
on train I through as the which Turkish
nightfall Royale.  with recipe called
should indeed, without London, among
...
</ssession>
</slide>
<slide>
<heading>Find a student to expel
Process a file listing mark deductions for 2041 students
to find the student with the largest total number of mark deductions.
<p>
Note use of a hash to store total mark deduction for each student.
<p>
<source examples/expel_student.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% head mark_deductions.txt 
"James Shi'En Yager","Wore mismatched socks","11/08/11", "1 marks deducted"
"Kunal Kaushik Magafas","Obscene word on t-shirt","06/07/11", "1 marks deducted"
"Chun Kin Ricky Smith","Runs Windows on laptop","18/08/11", "4 marks deducted"
"Honglin Kua","Doesn't play nice","25/07/11", "1 marks deducted"
"Christopher Stewart Marr","Urinated on CSE lab computer","29/08/11", "15 marks deducted"
"Cynthia Flottum","Doesn't play nice","18/07/11", "1 marks deducted"
"Phuc Wei","Bit another student","20/08/11", "7 marks deducted"
"William Miao Oakley","Didn't listen to Andrew","19/07/11", "3 marks deducted"
"Ximing Tee","Wore mismatched socks","02/07/11", "1 marks deducted"
"Elbert Coutts","Attended lecture in underpants","18/08/11", "10 marks deducted"
% expel_student.pl mark_deductions.txt 
Expel Chun Kin Ricky Smith who had 85 marks deducted
</ssession>
<p>
The  data file mark_deductions.txt above was generated with this Perl script:
<p>
<source examples/generate_mark_deductions.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% generate_mark_deductions.pl enrollments
"Ahmed Moussa","Doesn't play nice","27/08/11", "1 marks deducted"
"Hui-Lyn Winwood","Kesha found on their ipod","23/08/11", "9 marks deducted"
"Ahmed Moussa","Disappointed their mother","24/07/11", "4 marks deducted"
...
</ssession>
</slide>
<slide>
<heading>Count Enrollments Summary
Process enrollment data to count enrollments in each course.
<p>
Note use of a hash to store tally enrollments.
<p>
<source examples/count_enrollments.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% count_enrollments.pl enrollments
Intro to Computing has 92 students enrolled
Computing 1A has 336 students enrolled
Computing 1B has 292 students enrolled
Solving Problems with Software has 45 students enrolled
Higher Computing 1A has 178 students enrolled
...
</ssession>
</slide>
<slide>
<heading>Count first names
Process enrollment data to count occurences of a first name.
<p>
Note use of a hash to store first names.
<p>
<source examples/count_first_names.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% count_first_names.pl enrollments
There are  2 people with the first name Aaron
There are  2 people with the first name Abdelsalam
There are  1 people with the first name Abdu
...
</ssession>
</slide>
<slide>
<heading>Find duplicate first names
Process enrollment data to list instances
of multiple people of the same first name being enrolled in a course.
<p>
<source examples/duplicate_first_names.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% duplicate_first_names.pl enrollments
In COMP1001 there are 2 people with the first name Albert
In COMP1001 there are 2 people with the first name Ashwin
In COMP1001 there are 2 people with the first name Benny
...
</ssession>
</slide>
<slide>
<heading>List student courses
Process enrollment data to list the courses being taken by each
student enrolled in the specified courses
<p>
Note use of a hash of space-separated strings to store the courses
taken by each student.
<p>
<source examples/list_student_courses.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% list_student_courses.pl enrollments COMP2041
Simon Saunders is taking:
COMP2011 Data Organisation
COMP2041 Software Construction
Waqas Napis is taking:
COMP2041 Software Construction
Benson D'Este is taking:
COMP2021 Digital System Structures
COMP2041 Software Construction
COMP2711 Higher Data Organisation
...
</ssession>
</slide>
<slide>
<heading>Course statistics
Process enrollment data to print a summary of the other courses being taken by
student enrolled in the specified courses
<p>
Note use of a hash of arrays to store the courses
taken by each student.
<p>
Note use of grep to search array.
<p>
Note custom sorting.
<p>
<source examples/course_statistics.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% course_statistics.pl enrollments COMP2041
0.5% of COMP2041 students take COMP9315(Database Systems Implementat'n)
0.5% of COMP2041 students take COMP9314(Next Generation Database Systs)
1.0% of COMP2041 students take COMP3141(Software Sys Des&Implementat'n)
...
23.2% of COMP2041 students take COMP2011(Data Organisation)
27.8% of COMP2041 students take COMP2021(Digital System Structures)
100.0% of COMP2041 students take COMP2041(Software Construction)
</ssession>
</slide>
<slide>
<heading>Printing Odd Numbers in a list
8 different ways to print the odd numbers in 
a list - illustrating various aspects of Perl
<p>
<source examples/print_odd.pl>
<p> 
</slide>
<slide>
<heading>Sum list
3 different ways to sum a list - illustrating
various aspects of Perl
<p>
<source examples/sum_list.pl>
<p> 
</slide>
<slide>
<heading>Splitting & Joining lists
Implementations of the builtin split & join
<p>
<source examples/split_join.pl>
<p> 
</slide>
<slide>
<heading>Splitting & Joining lists
Implementations of the builtin split & join
<p>
<source examples/split_join.pl>
<p> 
</slide>
<slide>
<heading>Push
Simple implementations of push builtin.
<p>
<source examples/push.pl>
</slide>
<slide>
<heading>Sorting with a Comparison function - Sorting Dates
Simple example of supplying a comparison function to sort
<p>
<source examples/sort_dates.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% sort_dates.pl
random_dates=06/02/2013 20/07/2005 01/12/2001 13/08/2008 20/02/2000
sorted dates=20/02/2000 01/12/2001 20/07/2005 13/08/2008 06/02/2013
</ssession>
</slide>
<slide>
<heading>Sorting on the basis of a hash value
Sorting days of the weeks using a hash.
<p>
<source examples/sort_days0.pl>
<p> 
For example:
<p>
<ssession>
% cd /home/cs2041/public_html/lec/perl/examples
% sort_dates.pl
random_days=Thursday Monday Sunday Sunday Tuesday
sorted days=Sunday Sunday Monday Tuesday Thursday
</ssession>
<p>
And here is a more concise version.
<p>
Note use of a hash slice to create the same hash
as the above example.
<p>
<source examples/sort_days1.pl>
<p> 
</slide>
<slide>
<heading>Implementing quicksort
Two implementations of quicksort in Perl.
The second version takes a reference to a comparison
funcion as its first argument.
<p>
Note also the passing of array references to partition1.
<p>
<source examples/quicksort0.pl>
<p>
Here is same code with prototypes added.
<p>
This changes the calling syntax for the functions to be more convenient.
<p>
Note quicksort1 can be called with the same syntax as Perl's builtin sort 
<p>
<source examples/quicksort1.pl>
<p> 
</slide>
<slide>
<heading>Providing Optional Keyword arguments with a Hash
Here is a small Perl function which has 6 arguments allow the user
to mcustomize its operation and it could easily have 6 more arguments (e.g. font name, size, type, color)
<p>
<source examples/html_times_table0.pl>
<p>
This make calls clumsy and difficult to interpret.
<p>
E.g. what does the the 1 passed as the 6th argument here specify?
<p>
<ssession>
print html_times_table(1, 12, 1, 12, "pink", 1);
</ssession>
<p>
You can allow calling similar to keyword argument (e.g. Pythons)
by having the values passed in a hash.
<p>
The arguments can be specified in any order and the code is more
reable because the argument name is associated, e.g:
<p>
<source examples/html_times_table1.pl>
<p>
This is more useful if there are sensible defaults for most  parameters 
and the user only needs specify a few.
<p>
Its common in some contexts to have tens of possible parameters to a fucntion
but most calls to the function only need specify a couple. 
<p>
here is the above example with defaults for the parameters:
<p>
<source examples/html_times_table2.pl>
<p>
</slide>
<slide>
<heading>Rename files using eval
Eval allows actions to be specified as fragments of Perl code.
<p>
This is very useful in appropriate contexts
<p>
This code renames the specified files using the specified Perl code.
<p>
For each file the Perl code  is executed with $_ set to the filename
and the file is renamed to the value of $_ after the execution.
<p>
/usr/bin/rename is very similar.
<p>
<source examples/rename0.pl>
<p>
For example:
<p>
<ssession>
% rename tr/A-Z/a-z/ *            # convert filenames to lower case
% rename 's/\.txt$/.html/' *.txt  # change suffix from txt to HTML
% rename 's/\W/_/g' *             # change non-word chars to udnerscore
# rename 's/\d+/$&+1/' *          # increment number which is part of filename
</ssession>
</slide>
<slide>
<heading>Defining a Module
<p>
Here is a very simple module defining and exporting
a few utility functions which operate on lists (see List::Util).
<p> 
<source examples/Example_Module.pm>
<p>
Using the module:
<p>
<source examples/module_example.pl>
<p>
</slide>
